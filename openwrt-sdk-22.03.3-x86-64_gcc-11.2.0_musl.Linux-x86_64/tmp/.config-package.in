menuconfig IMAGEOPT
	bool "Image configuration"
	default n
source "package/*/image-config.in"
menu "Base system"

	config PACKAGE_libasan
		tristate "libasan...................... Runtime library for AddressSanitizer in GCC"
		default y if DEFAULT_libasan
		default m if ALL||ALL_NONSHARED
		depends on !mips64
		select PACKAGE_librt
		depends on !mips64el
		select PACKAGE_libstdcpp
		depends on USE_GLIBC
		depends on !arc
		help
		 Runtime library for AddressSanitizer in GCC
		 http://gcc.gnu.org/
		 Felix Fietkau <nbd@nbd.name>


		menu "Configuration"
		depends on EXTERNAL_TOOLCHAIN && PACKAGE_libasan
	
		config LIBASAN_ROOT_DIR
			string
			prompt "libasan shared library base directory"
			depends on EXTERNAL_TOOLCHAIN && PACKAGE_libasan
			default TOOLCHAIN_ROOT  if !NATIVE_TOOLCHAIN
			default "/"  if NATIVE_TOOLCHAIN
	
		config LIBASAN_FILE_SPEC
			string
			prompt "libasan shared library files (use wildcards)"
			depends on EXTERNAL_TOOLCHAIN && PACKAGE_libasan
			default "./lib/libasan.so.*"
	
		endmenu

	config PACKAGE_libatomic
		tristate "libatomic......................................... Atomic support library"
		default y if DEFAULT_libatomic
		default m if ALL||ALL_NONSHARED
		select PACKAGE_libgcc
		help
		 Atomic support library
		 http://gcc.gnu.org/
		 Felix Fietkau <nbd@nbd.name>


		menu "Configuration"
			depends on EXTERNAL_TOOLCHAIN && PACKAGE_libatomic
	
		config LIBATOMIC_ROOT_DIR
			string
			prompt "libatomic shared library base directory"
			depends on EXTERNAL_TOOLCHAIN && PACKAGE_libatomic
			default TOOLCHAIN_ROOT  if !NATIVE_TOOLCHAIN
			default "/"  if NATIVE_TOOLCHAIN
	
		config LIBATOMIC_FILE_SPEC
			string
			prompt "libatomic shared library files (use wildcards)"
			depends on EXTERNAL_TOOLCHAIN && PACKAGE_libatomic
			default "./lib/libatomic.so.*"
	
		endmenu

	config PACKAGE_libc
		tristate "libc........................................................... C library"
		default y if DEFAULT_libc
		default m if ALL||ALL_NONSHARED
		select PACKAGE_libgcc
		help
		 C library
		 Felix Fietkau <nbd@nbd.name>


		menu "Configuration"
		depends on EXTERNAL_TOOLCHAIN && PACKAGE_libc
	
		config LIBC_ROOT_DIR
			string
			prompt "libc shared library base directory"
			depends on EXTERNAL_TOOLCHAIN && PACKAGE_libc
			default TOOLCHAIN_ROOT  if !NATIVE_TOOLCHAIN
			default "/"  if NATIVE_TOOLCHAIN
	
		config LIBC_FILE_SPEC
			string
			prompt "libc shared library files (use wildcards)"
			depends on EXTERNAL_TOOLCHAIN && PACKAGE_libc
			default "./lib/ld{*.so*,-linux*.so.*} ./lib/lib{anl,c,cidn,crypt,dl,m,nsl,nss_dns,nss_files,resolv,util}{-*.so,.so.*,.so}"
	
		endmenu

	config PACKAGE_libgcc
		tristate "libgcc............................................... GCC support library"
		default y if DEFAULT_libgcc
		default m if ALL||ALL_NONSHARED
		help
		 GCC support library
		 http://gcc.gnu.org/
		 Felix Fietkau <nbd@nbd.name>


		menu "Configuration"
			depends on EXTERNAL_TOOLCHAIN && PACKAGE_libgcc
	
		config LIBGCC_ROOT_DIR
			string
			prompt "libgcc shared library base directory"
			depends on EXTERNAL_TOOLCHAIN && PACKAGE_libgcc
			default TOOLCHAIN_ROOT  if !NATIVE_TOOLCHAIN
			default "/"  if NATIVE_TOOLCHAIN
	
		config LIBGCC_FILE_SPEC
			string
			prompt "libgcc shared library files (use wildcards)"
			depends on EXTERNAL_TOOLCHAIN && PACKAGE_libgcc
			default "./lib/libgcc_s.so.*"
	
		endmenu

	config PACKAGE_libgfortran
		tristate "libgfortran..................................... GFortran support library"
		default y if DEFAULT_libgfortran
		default m if ALL||ALL_NONSHARED
		depends on INSTALL_GFORTRAN
		help
		 GFortran support library
		 http://gcc.gnu.org/
		 Felix Fietkau <nbd@nbd.name>


		menu "Configuration"
			depends on EXTERNAL_TOOLCHAIN && PACKAGE_libgfortran
	
		config LIBGFORTRAN_ROOT_DIR
			string
			prompt "libgfortran shared library base directory"
			depends on EXTERNAL_TOOLCHAIN && PACKAGE_libgfortran
			default TOOLCHAIN_ROOT  if !NATIVE_TOOLCHAIN
			default "/"  if NATIVE_TOOLCHAIN
	
		config LIBGFORTRAN_FILE_SPEC
			string
			prompt "libgfortran shared library files (use wildcards)"
			depends on EXTERNAL_TOOLCHAIN && PACKAGE_libgfortran
			default "./usr/lib/libgfortran.so.*"
	
		endmenu

	config PACKAGE_libgomp
		tristate "libgomp........................................... OpenMP support library"
		default y if DEFAULT_libgomp
		default m if ALL||ALL_NONSHARED
		help
		 OpenMP support library
		 http://gcc.gnu.org/
		 Felix Fietkau <nbd@nbd.name>


		menu "Configuration"
			depends on EXTERNAL_TOOLCHAIN && PACKAGE_libgomp
	
		config LIBGOMP_ROOT_DIR
			string
			prompt "libgomp shared library base directory"
			depends on EXTERNAL_TOOLCHAIN && PACKAGE_libgomp
			default TOOLCHAIN_ROOT  if !NATIVE_TOOLCHAIN
			default "/"  if NATIVE_TOOLCHAIN
	
		config LIBGOMP_FILE_SPEC
			string
			prompt "libgomp shared library files (use wildcards)"
			depends on EXTERNAL_TOOLCHAIN && PACKAGE_libgomp
			default "./lib/libgomp.so*"
	
		endmenu

	config PACKAGE_liblsan
		tristate "liblsan......................... Runtime library for LeakSanitizer in GCC"
		default y if DEFAULT_liblsan
		default m if ALL||ALL_NONSHARED
		select PACKAGE_libstdcpp
		depends on !mips64el
		depends on !mips64
		select PACKAGE_librt
		depends on !mipsel
		depends on !arc
		depends on USE_GLIBC
		depends on !mips
		help
		 Runtime library for LeakSanitizer in GCC
		 http://gcc.gnu.org/
		 Felix Fietkau <nbd@nbd.name>


		menu "Configuration"
		depends on EXTERNAL_TOOLCHAIN && PACKAGE_liblsan
	
		config LIBLSAN_ROOT_DIR
			string
			prompt "liblsan shared library base directory"
			depends on EXTERNAL_TOOLCHAIN && PACKAGE_liblsan
			default TOOLCHAIN_ROOT  if !NATIVE_TOOLCHAIN
			default "/"  if NATIVE_TOOLCHAIN
	
		config LIBLSAN_FILE_SPEC
			string
			prompt "liblsan shared library files (use wildcards)"
			depends on EXTERNAL_TOOLCHAIN && PACKAGE_liblsan
			default "./lib/liblsan.so.*"
	
		endmenu

	config PACKAGE_libpthread
		tristate "libpthread.......................................... POSIX thread library"
		default y if DEFAULT_libpthread
		default m if ALL||ALL_NONSHARED
		select PACKAGE_libgcc
		help
		 POSIX thread library
		 Felix Fietkau <nbd@nbd.name>


		menu "Configuration"
		depends on EXTERNAL_TOOLCHAIN && PACKAGE_libpthread
	
		config LIBPTHREAD_ROOT_DIR
			string
			prompt "libpthread shared library base directory"
			depends on EXTERNAL_TOOLCHAIN && PACKAGE_libpthread
			default TOOLCHAIN_ROOT  if !NATIVE_TOOLCHAIN
			default "/"  if NATIVE_TOOLCHAIN
	
		config LIBPTHREAD_FILE_SPEC
			string
			prompt "libpthread shared library files (use wildcards)"
			depends on EXTERNAL_TOOLCHAIN && PACKAGE_libpthread
			default "./lib/libpthread{-*.so,.so.*}"
	
		endmenu

	config PACKAGE_librt
		tristate "librt................................ POSIX.1b RealTime extension library"
		default y if DEFAULT_librt
		default m if ALL||ALL_NONSHARED
		select PACKAGE_libpthread
		help
		 POSIX.1b RealTime extension library
		 Felix Fietkau <nbd@nbd.name>


		menu "Configuration"
		depends on EXTERNAL_TOOLCHAIN && PACKAGE_librt
	
		config LIBRT_ROOT_DIR
			string
			prompt "librt shared library base directory"
			depends on EXTERNAL_TOOLCHAIN && PACKAGE_librt
			default TOOLCHAIN_ROOT  if !NATIVE_TOOLCHAIN
			default "/"  if NATIVE_TOOLCHAIN
	
		config LIBRT_FILE_SPEC
			string
			prompt "librt shared library files (use wildcards)"
			depends on EXTERNAL_TOOLCHAIN && PACKAGE_librt
			default "./lib/librt{-*.so,.so.*}"
	
		endmenu

	config PACKAGE_libstdcpp
		tristate "libstdcpp.................................... GNU Standard C++ Library v3"
		default y if DEFAULT_libstdcpp
		default m if ALL||ALL_NONSHARED
		help
		 GNU Standard C++ Library v3
		 http://gcc.gnu.org/
		 Felix Fietkau <nbd@nbd.name>


		menu "Configuration"
		depends on EXTERNAL_TOOLCHAIN && PACKAGE_libstdcpp
	
		config LIBSTDCPP_ROOT_DIR
			string
			prompt "libstdcpp shared library base directory"
			depends on EXTERNAL_TOOLCHAIN && PACKAGE_libstdcpp
			default TOOLCHAIN_ROOT  if !NATIVE_TOOLCHAIN
			default "/"  if NATIVE_TOOLCHAIN
	
		config LIBSTDCPP_FILE_SPEC
			string
			prompt "libstdc++ shared library files (use wildcards)"
			depends on EXTERNAL_TOOLCHAIN && PACKAGE_libstdcpp
			default "./lib/libstdc++.so.*"
	
		endmenu

	config PACKAGE_libthread-db
		tristate "libthread-db...................... POSIX thread library debugging support"
		default y if DEFAULT_libthread-db
		default m if ALL||ALL_NONSHARED
		depends on !USE_MUSL
		help
		 POSIX thread library debugging support
		 Felix Fietkau <nbd@nbd.name>


		menu "Configuration"
		depends on EXTERNAL_TOOLCHAIN && PACKAGE_libthread-db
	
		config LIBTHREAD_DB_ROOT_DIR
			string
			prompt "POSIX thread debugging shared library base directory"
			depends on EXTERNAL_TOOLCHAIN && PACKAGE_libthread-db
			default TOOLCHAIN_ROOT  if !NATIVE_TOOLCHAIN
			default "/"  if NATIVE_TOOLCHAIN
	
		config LIBTHREAD_DB_FILE_SPEC
			string
			prompt "POSIX thread debugging shared library files (use wildcards)"
			depends on EXTERNAL_TOOLCHAIN && PACKAGE_libthread-db
			default "./lib/libthread_db{-*.so,.so.*}"
	
		endmenu

	config PACKAGE_libtsan
		tristate "libtsan....................... Runtime library for ThreadSanitizer in GCC"
		default y if DEFAULT_libtsan
		default m if ALL||ALL_NONSHARED
		depends on !arc
		depends on USE_GLIBC
		depends on !mips
		depends on !mips64el
		select PACKAGE_libstdcpp
		select PACKAGE_librt
		depends on !mips64
		depends on !mipsel
		help
		 Runtime library for ThreadSanitizer in GCC
		 http://gcc.gnu.org/
		 Felix Fietkau <nbd@nbd.name>


		menu "Configuration"
		depends on EXTERNAL_TOOLCHAIN && PACKAGE_libtsan
	
		config LIBTSAN_ROOT_DIR
			string
			prompt "libtsan shared library base directory"
			depends on EXTERNAL_TOOLCHAIN && PACKAGE_libtsan
			default TOOLCHAIN_ROOT  if !NATIVE_TOOLCHAIN
			default "/"  if NATIVE_TOOLCHAIN
	
		config LIBTSAN_FILE_SPEC
			string
			prompt "libtsan shared library files (use wildcards)"
			depends on EXTERNAL_TOOLCHAIN && PACKAGE_libtsan
			default "./lib/libtsan.so.*"
	
		endmenu

	config PACKAGE_libubsan
		tristate "libubsan........... Runtime library for UndefinedBehaviorSanitizer in GCC"
		default y if DEFAULT_libubsan
		default m if ALL||ALL_NONSHARED
		depends on !arc
		depends on USE_GLIBC
		depends on !mips64el
		select PACKAGE_libstdcpp
		select PACKAGE_librt
		depends on !mips64
		help
		 Runtime library for UndefinedBehaviorSanitizer in GCC
		 http://gcc.gnu.org/
		 Felix Fietkau <nbd@nbd.name>


		menu "Configuration"
		depends on EXTERNAL_TOOLCHAIN && PACKAGE_libubsan
	
		config LIBUBSAN_ROOT_DIR
			string
			prompt "libubsan shared library base directory"
			depends on EXTERNAL_TOOLCHAIN && PACKAGE_libubsan
			default TOOLCHAIN_ROOT  if !NATIVE_TOOLCHAIN
			default "/"  if NATIVE_TOOLCHAIN
	
		config LIBUBSAN_FILE_SPEC
			string
			prompt "libubsan shared library files (use wildcards)"
			depends on EXTERNAL_TOOLCHAIN && PACKAGE_libubsan
			default "./lib/libubsan.so.*"
	
		endmenu

endmenu

menu "Kernel modules"

menu "Block Devices"
endmenu
menu "CAN Support"
endmenu
menu "Cryptographic API modules"
endmenu
menu "Filesystems"
endmenu
menu "FireWire support"
endmenu
menu "GPIO support"
endmenu
menu "Hardware Monitoring Support"
endmenu
menu "I2C support"
endmenu
menu "Industrial I/O Modules"
endmenu
menu "Input modules"
endmenu
menu "LED modules"
endmenu
menu "Libraries"
endmenu
menu "Multiplexer Support"
endmenu
menu "Native Language Support"
endmenu
menu "Netfilter Extensions"
endmenu
menu "Network Devices"
endmenu
menu "Network Support"
endmenu
menu "Other modules"
endmenu
menu "PCMCIA support"
endmenu
menu "SPI Support"
endmenu
menu "Sound Support"
endmenu
menu "USB Support"
endmenu
menu "Video Support"
endmenu
menu "Virtualization"
endmenu
menu "W1 support"
endmenu
menu "WPAN 802.15.4 Support"
endmenu
menu "Wireless Drivers"
endmenu
endmenu

menu "Libraries"

menu "SSL"
	config PACKAGE_libmbedtls
		tristate "libmbedtls........................................ Embedded SSL (library)"
		default y if DEFAULT_libmbedtls
		default m if ALL
		select PACKAGE_librt if USE_GLIBC
		select PACKAGE_libpthread if USE_GLIBC
		select PACKAGE_libc
		help
		 The aim of the mbedtls project is to provide a quality, open-source
		 cryptographic library written in C and targeted at embedded systems.
		 This package contains the mbedtls library.
		 https://tls.mbed.org
		 


	config LIBMBEDTLS_DEBUG_C
		depends on PACKAGE_libmbedtls
		bool "Enable debug functions"
		default n
		help
		 This option enables mbedtls library's debug functions.
	
		 It increases the uncompressed libmbedtls binary size
		 by around 60 KiB (for an ARMv5 platform).
	
		 Usually, you don't need this, so don't select this if you're unsure.
	
	config LIBMBEDTLS_HKDF_C
		depends on PACKAGE_libmbedtls
		bool "Enable the HKDF algorithm (RFC 5869)"
		default n
		help
		 This option adds support for the Hashed Message Authentication Code
		 (HMAC)-based key derivation function (HKDF).

endmenu
	config PACKAGE_libcares
		tristate "libcares.. Library for asyncronous DNS Requests (including name resolves)"
		default y if DEFAULT_libcares
		default m if ALL
		select PACKAGE_libpthread if USE_GLIBC
		select PACKAGE_libc
		select PACKAGE_librt if USE_GLIBC
		help
		 c-ares is a C library for asynchronous DNS requests (including name resolves)
		 
		 C89 compatibility, MIT licensed, builds for and runs on POSIX, Windows,
		 Netware, Android and many more operating systems.
		 
		 http://c-ares.haxx.se/
		 Karl Palsson <karlp@etactica.com>

	config PACKAGE_libev
		tristate "libev........................................ High-performance event loop"
		default y if DEFAULT_libev
		default m if ALL
		select PACKAGE_librt if USE_GLIBC
		select PACKAGE_libc
		select PACKAGE_libpthread if USE_GLIBC
		help
		 A full-featured and high-performance event loop that is loosely modelled after
		  libevent, but without its limitations and bugs.
		 http://software.schmorp.de/pkg/libev.html
		 Karl Palsson <karlp@tweak.net.au>

	config PACKAGE_libpcre
		tristate "libpcre..................... A Perl Compatible Regular Expression library"
		default y if DEFAULT_libpcre
		default m if ALL
		select PACKAGE_libc
		select PACKAGE_libpthread if USE_GLIBC
		select PACKAGE_librt if USE_GLIBC
		help
		 A Perl Compatible Regular Expression library
		 http://www.pcre.org/
		 Thomas Heil <heil@terminal-consulting.de>

	config PACKAGE_libsodium
		tristate "libsodium................ P(ortable|ackageable) NaCl-based crypto library"
		default y if DEFAULT_libsodium
		default m if ALL
		select PACKAGE_libpthread if USE_GLIBC
		select PACKAGE_libc
		select PACKAGE_libpthread
		select PACKAGE_librt if USE_GLIBC
		help
		 NaCl (pronounced "salt") is a new easy-to-use high-speed software library for network communication, encryption, decryption, signatures, etc.
		   NaCl's goal is to provide all of the core operations needed to build higher-level cryptographic tools.
		   Sodium is a portable, cross-compilable, installable, packageable fork of NaCl (based on the latest released upstream version nacl-20110221), with a compatible API.
		   The design choices, particularly in regard to the Curve25519 Diffie-Hellman function, emphasize security (whereas NIST curves emphasize "performance" at the cost of security), and "magic constants" in NaCl/Sodium have clear rationales.
		   The same cannot be said of NIST curves, where the specific origins of certain constants are not described by the standards.
		   And despite the emphasis on higher security, primitives are faster across-the-board than most implementations of the NIST standards.
		 https://github.com/jedisct1/libsodium
		 Damiano Renfer <damiano.renfer@gmail.com>


	menu "Configuration"
		depends on PACKAGE_libsodium
		config LIBSODIUM_MINIMAL
			bool "Compile only what is required for the high-level API (no aes128ctr), should be fine in most cases."
			default y
	endmenu

endmenu

menu "LuCI"

menu "3. Applications"
	config PACKAGE_luci-app-shadowsocks
		tristate "luci-app-shadowsocks.................. LuCI Support for shadowsocks-libev"
		default y if DEFAULT_luci-app-shadowsocks
		default m if ALL
		select PACKAGE_libc
		select PACKAGE_libpthread if USE_GLIBC
		select PACKAGE_ipset
		select PACKAGE_iptables
		select PACKAGE_librt if USE_GLIBC
		help
		 LuCI Support for shadowsocks-libev.
		 Jian Chang <aa65535@live.com>

	config PACKAGE_luci-app-shadowsocks-without-ipset
		tristate "luci-app-shadowsocks-without-ipset.... LuCI Support for shadowsocks-libev"
		default y if DEFAULT_luci-app-shadowsocks-without-ipset
		default m if ALL
		select PACKAGE_libpthread if USE_GLIBC
		select PACKAGE_libc
		select PACKAGE_librt if USE_GLIBC
		select PACKAGE_iptables
		help
		 LuCI Support for shadowsocks-libev.
		 Jian Chang <aa65535@live.com>

endmenu
endmenu

menu "Network"

	config PACKAGE_chinadns-ng
		tristate "chinadns-ng... ChinaDNS Next Generation, refactoring with epoll and ipset"
		default y if DEFAULT_chinadns-ng
		default m if ALL
		select PACKAGE_ipset
		select PACKAGE_librt if USE_GLIBC
		select PACKAGE_libc
		select PACKAGE_libpthread if USE_GLIBC
		help
		 ChinaDNS Next Generation, refactoring with epoll and ipset.
		 https://github.com/zfl9/chinadns-ng
		 pexcn <i@pexcn.me>

	config PACKAGE_shadowsocks-libev
		tristate "shadowsocks-libev....................... Lightweight Secured Socks5 Proxy"
		default y if DEFAULT_shadowsocks-libev
		default m if ALL
		select PACKAGE_libc
		select PACKAGE_libmbedtls if !SHADOWSOCKS_WITH_MBEDTLS
		select PACKAGE_libpthread if USE_GLIBC
		select PACKAGE_libsodium if !SHADOWSOCKS_WITH_SODIUM
		select PACKAGE_libcares if !SHADOWSOCKS_WITH_CARES
		select PACKAGE_libev if !SHADOWSOCKS_WITH_EV
		select PACKAGE_libpcre if !SHADOWSOCKS_WITH_PCRE
		select PACKAGE_librt if USE_GLIBC
		select PACKAGE_libpthread
		help
		 Shadowsocks-libev is a lightweight secured socks5 proxy for embedded devices and low end boxes.
		 https://github.com/shadowsocks/shadowsocks-libev
		 Jian Chang <aa65535@live.com>

	config PACKAGE_shadowsocks-libev-server
		tristate "shadowsocks-libev-server................ Lightweight Secured Socks5 Proxy"
		default y if DEFAULT_shadowsocks-libev-server
		default m if ALL
		select PACKAGE_libc
		select PACKAGE_libmbedtls if !SHADOWSOCKS_WITH_MBEDTLS
		select PACKAGE_libpthread if USE_GLIBC
		select PACKAGE_libcares if !SHADOWSOCKS_WITH_CARES
		select PACKAGE_libpcre if !SHADOWSOCKS_WITH_PCRE
		select PACKAGE_libpthread
		select PACKAGE_libev if !SHADOWSOCKS_WITH_EV
		select PACKAGE_librt if USE_GLIBC
		select PACKAGE_libsodium if !SHADOWSOCKS_WITH_SODIUM
		help
		 Shadowsocks-libev is a lightweight secured socks5 proxy for embedded devices and low end boxes.
		 https://github.com/shadowsocks/shadowsocks-libev
		 Jian Chang <aa65535@live.com>


	menu "Shadowsocks-libev Compile Configuration"
		depends on PACKAGE_shadowsocks-libev || PACKAGE_shadowsocks-libev-server
		config SHADOWSOCKS_STATIC_LINK
			bool "enable static link libraries."
			default n
	
			menu "Select libraries"
				depends on SHADOWSOCKS_STATIC_LINK
				config SHADOWSOCKS_WITH_EV
					bool "static link libev."
					default y
	
				config SHADOWSOCKS_WITH_PCRE
					bool "static link libpcre."
					default y
	
				config SHADOWSOCKS_WITH_CARES
					bool "static link libcares."
					default y
	
				config SHADOWSOCKS_WITH_SODIUM
					bool "static link libsodium."
					default y
	
				config SHADOWSOCKS_WITH_MBEDTLS
					bool "static link libmbedtls."
					default y
			endmenu
	endmenu

endmenu

menu "Utilities"

	config PACKAGE_ldconfig
		tristate "ldconfig............................... Shared library path configuration"
		default y if DEFAULT_ldconfig
		default m if ALL||ALL_NONSHARED
		depends on !USE_MUSL
		help
		 Shared library path configuration
		 Felix Fietkau <nbd@nbd.name>


		menu "Configuration"
			depends on EXTERNAL_TOOLCHAIN && PACKAGE_ldconfig
	
		config LDCONFIG_ROOT_DIR
			string
			prompt "ldconfig base directory"
			depends on EXTERNAL_TOOLCHAIN && PACKAGE_ldconfig
			default TOOLCHAIN_ROOT  if !NATIVE_TOOLCHAIN
			default "/"  if NATIVE_TOOLCHAIN
	
		config LDCONFIG_FILE_SPEC
			string
			prompt "ldconfig file"
			depends on EXTERNAL_TOOLCHAIN && PACKAGE_ldconfig
			default "./sbin/ldconfig"
	
		endmenu

	config PACKAGE_ldd
		tristate "ldd.................................................... LDD trace utility"
		default y if DEFAULT_ldd
		default m if ALL||ALL_NONSHARED
		depends on !USE_MUSL
		help
		 LDD trace utility
		 Felix Fietkau <nbd@nbd.name>


		menu "Configuration"
			depends on EXTERNAL_TOOLCHAIN && PACKAGE_ldd
	
		config LDD_ROOT_DIR
			string
			prompt "ldd trace utility base directory"
			depends on EXTERNAL_TOOLCHAIN && PACKAGE_ldd
			default TOOLCHAIN_ROOT  if !NATIVE_TOOLCHAIN
			default "/"  if NATIVE_TOOLCHAIN
	
		config LDD_FILE_SPEC
			string
			prompt "ldd trace utility file"
			depends on EXTERNAL_TOOLCHAIN && PACKAGE_ldd
			default "./usr/bin/ldd"
	
		endmenu

	config PACKAGE_mbedtls-util
		tristate "mbedtls-util.................................... Embedded SSL (utilities)"
		default y if DEFAULT_mbedtls-util
		default m if ALL
		select PACKAGE_librt if USE_GLIBC
		select PACKAGE_libmbedtls
		select PACKAGE_libpthread if USE_GLIBC
		select PACKAGE_libc
		help
		 The aim of the mbedtls project is to provide a quality, open-source
		 cryptographic library written in C and targeted at embedded systems.
		 This package contains mbedtls helper programs for private key and
		 CSR generation (gen_key, cert_req)
		 https://tls.mbed.org
		 

endmenu

